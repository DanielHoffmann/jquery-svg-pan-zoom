{"version":3,"sources":["jquery.svg.pan.zoom.coffee"],"names":[],"mappings":"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","file":"jquery.svg.pan.zoom.js","sourceRoot":"/source/","sourcesContent":["###\njQuery SVG Pan Zoom v1.0.1, December 2014\n\nAuthor: Daniel Hoffmann Bernardes (daniel.hoffmann.bernardes@gmail.com)\n\nRepository: https://github.com/DanielHoffmann/jquery-svg-pan-zoom/\n\njQuery plugin to enable pan and zoom in SVG images either programmatically or through mouse/touch events.\n\n[Demo page](http://danielhoffmann.github.io/jquery-svg-pan-zoom/)\n\n# Features\n - Programmatically manipulate the SVG viewBox\n - Mouse and touch events to pan the SVG viewBox\n - Mousewheel events to zoom in or out the SVG viewBox\n - Animations\n - Mousewheel zooming keeps the cursor over the same coordinates relative to the image (A.K.A. GoogleMaps-like zoom)\n - Limiting the navigable area\n\n# Requirements\n\njQuery\n\nSVG-enabled browser (does not work with SVG work-arounds that use Flash)\n\n# The viewBox\nThe viewBox is an attribute of SVG images that define which parts of the image are visible, it is defined by 4 numbers: X, Y, Width, Height. These numbers together specify the visible area. This plugin works by manipulating these four numbers. For example, moving the image to the right alters the X value while zooming in reduces Width and Height.\n\n\n# Usage\n\nvar svgPanZoom= $(\"svg\").svgPanZoom(options)\n\nIf the selection has more than one element `svgPanZoom` will return an array with an SvgPanZoom object for each image in the same order of the selection. If only one element is selected then the return is a single SvgPanZoom object. If no elements are selected the above call returns `null`\n\nThe returned SvgPanZoom object contains all options, these options can be overriden at any time directly, for example to disable mouseWheel events simply:\n\nsvgPanZoom.events.mouseWheel= false\n\n\nthe SvgPanZoom object also has methods for manipulating the viewBox programmatically. For example:\n\nsvgPanZoom.zoomIn()\n\nwill zoomIn the image using options.zoomFactor.\n\n\n\n# Options\n\nOptions:\n{\n    events: {\n        mouseWheel: boolean (true), // enables mouse wheel zooming events\n        doubleClick: boolean (true), // enables double-click to zoom-in events\n        drag: boolean (true), // enables drag and drop to move the SVG events\n        dragCursor: string \"move\" // cursor to use while dragging the SVG\n    },\n    animationTime: number (300) // time in milliseconds to use as default for animations. Set 0 to remove the animation\n    zoomFactor: 0.25 // how much to zoom-in or zoom-out\n    panFactor: 100 // how much to move the viewBox when calling .panDirection() methods\n    initialViewBox: { // the initial viewBox, if null or undefined will try to use the viewBox set in the svg tag. Also accepts string in the format \"X Y Width Height\"\n        x: number (0) // the top-left corner X coordinate\n        y: number (0) // the top-left corner Y coordinate\n        width: number (1000) // the width of the viewBox\n        height: number (1000) // the height of the viewBox\n    },\n    limits: { // the limits in which the image can be moved. If null or undefined will use the initialViewBox plus 15% in each direction\n        x: number (-150)\n        y: number (-150)\n        x2: number (1150)\n        y2: number (1150)\n    }\n}\n\n\n# Methods\n\n - pan\n\nsvgPanZoom.panLeft(amount, animationTime)\nsvgPanZoom.panRight(amount, animationTime)\nsvgPanZoom.panUp(amount, animationTime)\nsvgPanZoom.panDown(amount, animationTime)\n\nMoves the SVG viewBox in the specified direction. Parameters:\n - amount: Number, optional. How much to move the viewBox, defaults to options.panFactor.\n - animationTime: Number, optional. How long the animation should last, defaults to options.animationTime.\n\n\n - zoom\n\nsvgPanZoom.zoomIn(animationTime)\nsvgPanZoom.zoomOut(animationTime)\n\nZooms the viewBox. Parameters:\n - animationTime: Number, optional. How long the animation should last, defaults to options.animationTime.\n\n\n - reset\n\nsvgPanZoom.reset()\n\nResets the SVG to options.initialViewBox values.\n\n - getViewBox\n\nsvgPanZoom.getViewBox()\n\nReturns the viewbox in this format:\n\n{\n    x: number\n    y: number\n    width: number\n    height: number\n}\n\n\n - setViewBox\n\nsvgPanZoom.setViewBox(x, y, width, height, animationTime)\n\nChanges the viewBox to the specified coordinates. Will respect the `options.limits` adapting the viewBox if needed (moving or reducing it to fit into `options.limits`\n - x: Number, the new x coodinate of the top-left corner\n - y: Number, the new y coodinate of the top-left corner\n - width: Number, the new width of the viewBox\n - height: Number, the new height of the viewBox\n - animationTime: Number, optional. How long the animation should last, defaults to options.animationTime.\n\n - setCenter\n\nsvgPanZoom.setCenter(x, y, animationTime)\n\nSets the center of the SVG. Parameters:\n - x: Number, the new x coordinate of the center\n - y: Number, the new y coordinate of the center\n - animationTime: Number, optional. How long the animation should last, defaults to options.animationTime.\n\n\n\n\n# Notes:\n\n - Only works in SVGs inlined in the HTML. You can use $.load() to load the SVG image in the page using AJAX and call $().svgPanZoom() in the callback\n - Touch pinch events to zoom not yet supported\n - This plugin does not create any controls (like arrows to move the image) on top of the SVG. These controls are simple to create manually and they can call the methods to move the image.\n\nCopyright (C) 2014 Daniel Hoffmann Bernardes, Ícaro Technologies\n Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n###\n\ndo ($ = jQuery) ->\n    defaultOptions =\n        events:\n            mouseWheel: true\n            doubleClick: true\n            drag: true,\n            dragCursor: \"move\"\n        animationTime: 300\n        zoomFactor: 0.25\n        panFactor: 100\n        initialViewBox: null\n        limits: null\n\n    defaultViewBox =\n        x: 0\n        y: 0\n        width: 1000\n        height: 1000\n\n    ###\n    checks the limits of the view box, returns a new viewBox that respects the limits\n    while keeping the original view box size if possible\n    If the view box needs to be reduced the returned view box will keep the aspect ratio of\n    the original view box\n    ###\n    checkLimits= (viewBox, limits) ->\n        vb = $.extend({}, viewBox)\n\n        limitsWidth = limits.x2 - limits.x\n        limitsHeight = limits.y2 - limits.y\n\n\n        #reducing the view box size if it no longer fits within the limits\n        if vb.width > limitsWidth\n            if vb.height > limitsHeight\n                if limitsWidth > limitsHeight #reduce to fit height\n                    reductionFactor = limitsHeight / vb.height\n                    vb.height = limitsHeight\n                    vb.width = vb.width * reductionFactor\n                else #reduce to fit width\n                    reductionFactor = limitsWidth / vb.width\n                    vb.width = limitsWidth\n                    vb.height = vb.height * reductionFactor\n            else\n                vb.width = limitsWidth\n        else if vb.height > limitsHeight\n            vb.height = limitsHeight\n\n\n        #moving the view box if its bounds are outside the specified limits\n        if vb.x < limits.x\n            vb.x = limits.x\n\n        if vb.y < limits.y\n            vb.y = limits.y\n\n        if vb.x + vb.width > limits.x2\n            vb.x = limits.x2 - vb.width\n\n        if vb.y + vb.height > limits.y2\n            vb.y = limits.y2 - vb.height\n\n        return vb\n\n    #parses the viewbox string as defined in the spec for the svg tag\n    #returns an object with x, y, width and height values\n    parseViewBoxString = (string) ->\n        vb = string.replace(\"\\s+\", \" \").split(\" \")\n        vb =\n            x: parseFloat(vb[0])\n            y: parseFloat(vb[1])\n            width: parseFloat(vb[2])\n            height: parseFloat(vb[3])\n\n\n    #gets the mouse or first touch position from the event relative to the SVG viewBox\n    #svgRoot is the DOM object (not jQuery object)\n    #returns an object { x: , y: }\n    getViewBoxCoordinatesFromEvent = (svgRoot, event) ->\n        pos = svgRoot.createSVGPoint()\n        if event.type == \"touchstart\" or event.type == \"touchmove\"\n            if event.originalEvent?\n                pos.x = event.originalEvent.touches[0].clientX\n                pos.y = event.originalEvent.touches[0].clientY\n            else\n                pos.x = event.touches[0].clientX\n                pos.y = event.touches[0].clientY\n        else #mouse event\n            pos.x = event.clientX\n            pos.y = event.clientY\n        ctm = svgRoot.getScreenCTM()\n        ctm = ctm.inverse()\n        pos = pos.matrixTransform(ctm);\n        return pos\n        \n        \n    #performs a zoomIn or zoomOut on the opts referenced SVG using the event mouse position\n    mouseZoom = (event, zoomIn, opts) ->\n        oldViewBox = @getViewBox()\n\n        event.preventDefault()\n        event.stopPropagation()\n\n        oldMousePosition = getViewBoxCoordinatesFromEvent(@$svg[0], ev)\n        oldcenter =\n            x: viewBox.x + viewBox.width/2\n            y: viewBox.y + viewBox.height/2\n        oldDistanceFromCenter =\n            x: oldcenter.x - oldMousePosition.x\n            y: oldcenter.y - oldMousePosition.y\n\n        if delta > 0\n            @zoomIn(undefined, 0)\n        else\n            @zoomOut(undefined, 0)\n\n        newMousePosition = getViewBoxCoordinatesFromEvent(@$svg[0], ev)\n\n        newcenter =\n            x: oldcenter.x + (oldMousePosition.x - newMousePosition.x)\n            y: oldcenter.y + (oldMousePosition.y - newMousePosition.y)\n\n        @setCenter(newcenter.x, newcenter.y, 0)\n        newViewBox = @getViewBox()\n        @setViewBox(oldViewBox.x, oldViewBox.y, oldViewBox.width, oldViewBox.height, 0) #turns back the viewBox to the original position\n        @setViewBox(newViewBox.x, newViewBox.y, newViewBox.width, newViewBox.height) #sets the viewBox to the new calculated position but shows animation if enabled\n        return\n\n    $.fn.svgPanZoom = (options) ->\n        ret= []\n        @each ->\n            #opts is the object that is returned to the caller with methods.\n            #The opts object contains the initial options in addition to methods to manipulate\n            #the SVG\n            opts = $.extend(true, {}, defaultOptions, options)\n            opts.$svg = $(@)\n\n            unless opts.animationTime?\n                opts.animationTime = 0\n\n            opts.$svg[0].setAttribute(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n            vb= $.extend({}, @.viewBox.baseVal)\n            unless opts.initialViewBox?\n                if vb.x == 0 and vb.y == 0  and vb.width == 0 and vb.height == 0\n                    vb = defaultViewBox\n                else\n                    vb =\n                        x: vb.x\n                        y: vb.y\n                        width: vb.width\n                        height: vb.height\n            else if typeof opts.initialViewBox == \"string\"\n                vb = parseViewBoxString(opts.initialViewBox)\n            else if typeof opts.initialViewBox == \"object\"\n                vb == null\n                if opts.initialViewBox == null\n                    vb = opts.$svg[0].getAttribute(\"viewBox\")\n                    if vb?\n                        vb = parseViewBoxString(vb)\n                    else\n                        vb = null\n                if vb == null\n                    vb = $.extend({}, defaultViewBox, opts.initialViewBox)\n            else\n                throw \"initialViewBox is of invalid type\"\n\n            #this viewBox is a private property accessed by the methods\n            #it is not exposed directly to the end user, to access it\n            #the user must use getViewBox() or setViewBox()\n            viewBox = vb\n            opts.initialViewBox = $.extend({}, viewBox)\n\n            unless opts.limits?\n                horizontalSizeIncrement = viewBox.width * 0.15\n                verticalSizeIncrement = viewBox.height * 0.15\n                opts.limits =\n                    x: viewBox.x - horizontalSizeIncrement\n                    y: viewBox.y - verticalSizeIncrement\n                    x2: viewBox.width + horizontalSizeIncrement\n                    y2: viewBox.height + verticalSizeIncrement\n\n\n            opts.reset = ->\n                inivb= @initialViewBox\n                @setViewBox(inivb.x, inivb.y, inivb.width, inivb.height, 0)\n                return\n            opts.getViewBox = ->\n                return $.extend({}, viewBox)\n\n            $animationDiv = $(\"<div></div>\")\n            opts.setViewBox = (x, y, width, height, animationTime= @animationTime) ->\n                if animationTime > 0\n                    $animationDiv.css\n                        left: viewBox.x + \"px\"\n                        top: viewBox.y + \"px\"\n                        width: viewBox.width + \"px\"\n                        height: viewBox.height + \"px\"\n\n                viewBox =\n                    x: if x? then x else viewBox.x\n                    y: if y? then y else viewBox.y\n                    width: if width then width else viewBox.width\n                    height: if height then height else viewBox.height\n                viewBox= checkLimits(viewBox, @limits)\n\n                #can't use $.attr because in SVG attributes are case-sensitive and jQuery lowercases the attribute names\n                if animationTime > 0\n                    #.animate() animates CSS rules, but we are changing the tag attributes\n                    #so we instead animate this div that is not inside the DOM\n                    #in the step callback of the animate function we set the viewBox on the svg\n                    $animationDiv.stop().animate\n                            left: viewBox.x\n                            top: viewBox.y\n                            width: viewBox.width\n                            height: viewBox.height\n                        ,\n                            duration: animationTime\n                            easing: \"linear\"\n                            step: ((value, properties) ->\n                                $div= $animationDiv\n                                @.$svg[0].setAttribute(\"viewBox\", \"#{ $div.css(\"left\")[0..-3] } #{ $div.css(\"top\")[0..-3] } #{ $div.css(\"width\")[0..-3] } #{ $div.css(\"height\")[0..-3] }\")\n                                return\n                            ).bind(@)\n                else\n                    @$svg[0].setAttribute(\"viewBox\", \"#{ viewBox.x } #{ viewBox.y } #{ viewBox.width } #{ viewBox.height }\")\n                return\n\n\n            opts.panLeft = (amount= @panFactor, animationTime= @animationTime) ->\n                @panRight(-amount, animationTime)\n            opts.panRight = (amount= @panFactor, animationTime= @animationTime) ->\n                @setViewBox(viewBox.x + amount, null, null, null, animationTime)\n                return\n\n            opts.panUp = (amount= @panFactor, animationTime= @animationTime) ->\n                @panDown(-amount, animationTime)\n            opts.panDown = (amount= @panFactor, animationTime= @animationTime) ->\n                @setViewBox(null, viewBox.y + amount, null, null, animationTime)\n                return\n\n            opts.zoomIn = (amount= @zoomFactor, animationTime= @animationTime) ->\n                @zoomOut(-amount, animationTime)\n            opts.zoomOut = (amount= @zoomFactor, animationTime= @animationTime) ->\n                if amount == 0\n                    return\n                else if amount < 0\n                    amount= Math.abs(amount)\n                    newWidth =  viewBox.width / (1+amount)\n                    newHeight = viewBox.height / (1+amount)\n                else\n                    newWidth =  viewBox.width * (1+amount)\n                    newHeight = viewBox.height * (1+amount)\n\n                #keeping the same overall center of the image\n                center=\n                    x: viewBox.x + viewBox.width/2\n                    y: viewBox.y + viewBox.height/2\n                @setViewBox(center.x - newWidth/2, center.y - newWidth/2, newWidth, newHeight, animationTime)\n                return\n\n            opts.setCenter = (x, y, animationTime= @animationTime) ->\n                @setViewBox(x - viewBox.width/2, y - viewBox.height/2, viewBox.width, viewBox.height, animationTime)\n                return\n\n            #binding the methods to the opts object\n            for own key, value of opts\n                if typeof value == \"function\"\n                    opts.key= value.bind(opts)\n\n            #binding events\n            \n\n            #TODO detect presence of jquery-mousewheel plugin (soon it will merged to core jQuery)\n            #use it instead of getting the delta from the original event\n            #maybe use the mouse wheel delta as zoomFactor?\n            opts.$svg.on \"mousewheel\", ((ev) ->\n                delta = ev.originalEvent.wheelDeltaY\n                if delta == 0 or opts.events.mouseWheel != true\n                    return\n\n                oldViewBox = @getViewBox()\n\n                ev.preventDefault()\n                ev.stopPropagation()\n\n                oldMousePosition = getViewBoxCoordinatesFromEvent(@$svg[0], ev)\n                oldcenter =\n                    x: viewBox.x + viewBox.width/2\n                    y: viewBox.y + viewBox.height/2\n                oldDistanceFromCenter =\n                    x: oldcenter.x - oldMousePosition.x\n                    y: oldcenter.y - oldMousePosition.y\n\n                if delta > 0\n                    @zoomIn(undefined, 0)\n                else\n                    @zoomOut(undefined, 0)\n\n                newMousePosition = getViewBoxCoordinatesFromEvent(@$svg[0], ev)\n\n                newcenter =\n                    x: oldcenter.x + (oldMousePosition.x - newMousePosition.x)\n                    y: oldcenter.y + (oldMousePosition.y - newMousePosition.y)\n\n                @setCenter(newcenter.x, newcenter.y, 0)\n                newViewBox = @getViewBox()\n                @setViewBox(oldViewBox.x, oldViewBox.y, oldViewBox.width, oldViewBox.height, 0) #turns back the viewBox to the original position\n                @setViewBox(newViewBox.x, newViewBox.y, newViewBox.width, newViewBox.height) #sets the viewBox to the new calculated position but shows animation if enabled\n                return\n            ).bind(opts)\n\n            \n\n            opts.$svg.dblclick ((ev) ->\n                if opts.events.doubleClick != true\n                    return\n                ev.preventDefault()\n                ev.stopPropagation()\n                @zoomIn()\n            ).bind(opts)\n\n            opts.$svg[0].addEventListener(\"click\", (ev) ->\n                if preventClick\n                    preventClick = false\n                    ev.stopPropagation()\n                    ev.preventDefault()\n            , true)\n            \n            dragStarted = false\n                        \n            preventClick = false\n            \n            opts.$svg.on \"mousedown touchstart\", ((ev) ->\n                if dragStarted #a drag operation is already happening\n                    return\n                if opts.events.drag != true or (ev.type == \"mousedown\" and ev.which != 1)\n                    return\n                dragStarted = true\n                preventClick = false\n\n                ev.preventDefault()\n                ev.stopPropagation()\n\n                initialViewBox = $.extend({}, viewBox)\n\n                $body = $(window.document.body)\n                oldCursor = $body.css(\"cursor\")\n                if @events.dragCursor?\n                    $body.css(\"cursor\", @events.dragCursor)\n\n                mouseMoveCallback = ((ev2) ->\n                    ev2.preventDefault()\n                    ev2.stopPropagation()\n\n                    #The initalMousePositioin calculation needs to be done here because it requires\n                    #the current viewbox, not the viewbox at the time the mousedown was triggered\n                    initialMousePosition = getViewBoxCoordinatesFromEvent(@$svg[0], ev)\n\n                    currentMousePosition = getViewBoxCoordinatesFromEvent(@$svg[0], ev2)\n                    \n                    if Math.sqrt(Math.pow(ev.pageX + ev2.pageX, 2) + Math.pow(ev.pageY + ev2.pageY, 2)) > 3 #mouse moved at least 3 pixels\n                        preventClick = true\n                        \n                    @setViewBox(\n                        initialViewBox.x + initialMousePosition.x - currentMousePosition.x,\n                        initialViewBox.y + initialMousePosition.y - currentMousePosition.y,\n                        null,\n                        null,\n                        0\n                    )\n                    return\n                ).bind(opts)\n\n                mouseUpCallback = ((ev2) ->\n                    if ev2.type == \"mouseout\" and ev2.target != ev2.currentTarget #mouse out on an element that is not the body\n                        return\n                    \n                    ev2.preventDefault()\n                    ev2.stopPropagation()\n\n                    $body[0].removeEventListener(\"mousemove\", mouseMoveCallback, true)\n                    $body[0].removeEventListener(\"touchmove\", mouseMoveCallback, true)\n                    $body[0].removeEventListener(\"mouseup\", mouseUpCallback, true)\n                    $body[0].removeEventListener(\"touchend\", mouseUpCallback, true)\n                    $body[0].removeEventListener(\"touchcancel\", mouseUpCallback, true)\n                    $body[0].removeEventListener(\"mouseout\", mouseUpCallback, true)\n\n                    if @events.dragCursor?\n                        $body.css(\"cursor\", oldCursor)\n\n                    dragStarted = false\n                    return\n                ).bind(opts)\n\n                $body[0].addEventListener(\"mousemove\", mouseMoveCallback, true)\n                $body[0].addEventListener(\"touchmove\", mouseMoveCallback, true)\n                $body[0].addEventListener(\"mouseup\", mouseUpCallback, true)\n                $body[0].addEventListener(\"touchend\", mouseUpCallback, true)\n                $body[0].addEventListener(\"touchcancel\", mouseUpCallback, true)\n                $body[0].addEventListener(\"mouseout\", mouseUpCallback, true)\n                return\n            ).bind(opts)\n\n\n            opts.setViewBox(vb.x, vb.y, vb.width, vb.height, 0)\n\n            ret.push(opts)\n            return\n\n        if ret.length == 0\n            return null\n        if ret.length == 1\n            return ret[0]\n        else return ret\n"]}